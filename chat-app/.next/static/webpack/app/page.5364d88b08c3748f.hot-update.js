"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/components/ChatInterface.tsx":
/*!******************************************!*\
  !*** ./app/components/ChatInterface.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/supabase */ \"(app-pages-browser)/./utils/supabase.ts\");\n/* harmony import */ var _CreateChannelModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CreateChannelModal */ \"(app-pages-browser)/./app/components/CreateChannelModal.tsx\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var _MessageContextMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MessageContextMenu */ \"(app-pages-browser)/./app/components/MessageContextMenu.tsx\");\n/* harmony import */ var _ThreadPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ThreadPanel */ \"(app-pages-browser)/./app/components/ThreadPanel.tsx\");\n/* harmony import */ var _MessageInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MessageInput */ \"(app-pages-browser)/./app/components/MessageInput.tsx\");\n/* harmony import */ var _UserList__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./UserList */ \"(app-pages-browser)/./app/components/UserList.tsx\");\n/* harmony import */ var _ChannelList__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ChannelList */ \"(app-pages-browser)/./app/components/ChannelList.tsx\");\n/* harmony import */ var _MessageList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MessageList */ \"(app-pages-browser)/./app/components/MessageList.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst supabase = (0,_utils_supabase__WEBPACK_IMPORTED_MODULE_2__.createSupabaseClient)();\n// Add this temporarily to your ChatInterface.tsx, near the top:\nconsole.log(\"Current Supabase URL:\", \"https://yqufmxinhmhgfbclmaao.supabase.co\");\nconst ChatInterface = ()=>{\n    _s();\n    const [showCreateChannel, setShowCreateChannel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useQueryClient)();\n    const [currentChannel, setCurrentChannel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isSubscriptionReady, setIsSubscriptionReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [contextMenu, setContextMenu] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeThread, setActiveThread] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isMessageSubReady, setIsMessageSubReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isChannelSubReady, setIsChannelSubReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [subscriptionStatus, setSubscriptionStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        messages: false,\n        channels: false,\n        threads: false\n    });\n    const { data: channels = [], refetch: refetchChannels } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQuery)({\n        queryKey: [\n            \"channels\"\n        ],\n        queryFn: async ()=>{\n            const { data, error } = await supabase.from(\"channels\").select(\"\\n          id,\\n          name,\\n          type,\\n          created_at,\\n          created_by,\\n          channel_members (\\n            user_id,\\n            profiles (\\n              id,\\n              username\\n            )\\n          )\\n        \").order(\"created_at\", {\n                ascending: true\n            }).returns();\n            if (error) throw error;\n            return data || [];\n        }\n    });\n    // Main channel messages - only show non-threaded messages\n    const { data: messages = [] } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQuery)({\n        queryKey: [\n            \"messages\",\n            currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id\n        ],\n        queryFn: async ()=>{\n            console.log(\"Fetching messages for channel:\", currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id);\n            if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id)) return [];\n            const { data, error } = await supabase.from(\"messages\").select(\"\\n          id,\\n          content,\\n          created_at,\\n          channel_id,\\n          user_id,\\n          thread_id,\\n          profiles (username)\\n        \").eq(\"channel_id\", currentChannel.id).is(\"thread_id\", null).order(\"created_at\", {\n                ascending: true\n            }).returns();\n            if (error) {\n                console.error(\"Error fetching messages:\", error);\n                return [];\n            }\n            return data || [];\n        },\n        enabled: !!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id)\n    });\n    // SINGLE channel subscription\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD04 Setting up channel subscription\");\n        const channel = supabase.channel(\"channel_changes\").on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"channels\"\n        }, async (payload)=>{\n            console.log(\"\\uD83D\\uDCE8 Channel change:\", {\n                payload,\n                type: \"channel_changes\",\n                timestamp: new Date().toISOString()\n            });\n            console.log(\"\\uD83D\\uDD04 Starting query invalidation and refetch\");\n            try {\n                await queryClient.invalidateQueries({\n                    queryKey: [\n                        \"channels\"\n                    ],\n                    refetchType: \"active\"\n                });\n                console.log(\"✅ Query invalidated\");\n                await refetchChannels();\n                console.log(\"✅ Channels refetched\");\n            } catch (error) {\n                console.error(\"❌ Error during invalidation/refetch:\", error);\n            }\n        }).subscribe((status)=>{\n            console.log(\"\\uD83D\\uDCE1 Channel subscription status: \".concat(status));\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    channels: status === \"SUBSCRIBED\"\n                }));\n        });\n        return ()=>{\n            console.log(\"\\uD83D\\uDD0C Cleaning up channel subscription\");\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    channels: false\n                }));\n            supabase.removeChannel(channel);\n        };\n    }, []); // Only on mount/unmount\n    // SINGLE message subscription - only when we have a channel\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id)) {\n            console.log(\"\\uD83D\\uDD04 Message subscription skipped - no channel\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Setting up message subscription for channel: \".concat(currentChannel.id));\n        const channel = supabase.channel(\"messages:\".concat(currentChannel.id)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"messages\",\n            filter: \"channel_id=eq.\".concat(currentChannel.id)\n        }, (payload)=>{\n            console.log(\"\\uD83D\\uDCE8 Message payload structure:\", {\n                fullPayload: payload,\n                newData: payload.new,\n                eventType: payload.eventType,\n                timestamp: new Date().toISOString()\n            });\n            queryClient.invalidateQueries({\n                queryKey: [\n                    \"messages\",\n                    currentChannel.id\n                ]\n            });\n        }).subscribe((status)=>{\n            console.log(\"\\uD83D\\uDCE1 Message subscription status: \".concat(status));\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    messages: status === \"SUBSCRIBED\"\n                }));\n        });\n        return ()=>{\n            console.log(\"\\uD83D\\uDD0C Cleaning up message subscription\");\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    messages: false\n                }));\n            supabase.removeChannel(channel);\n        };\n    }, [\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id\n    ]); // Only when channel changes\n    // SINGLE thread subscription - only when we have an active thread\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!(activeThread === null || activeThread === void 0 ? void 0 : activeThread.id)) {\n            console.log(\"\\uD83D\\uDD04 Thread subscription skipped - no thread\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Setting up thread subscription for: \".concat(activeThread.id));\n        const channel = supabase.channel(\"thread:\".concat(activeThread.id)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"messages\",\n            filter: \"thread_id=eq.\".concat(activeThread.id)\n        }, (payload)=>{\n            console.log(\"\\uD83D\\uDCE8 Thread message change:\", payload);\n            queryClient.invalidateQueries({\n                queryKey: [\n                    \"thread\",\n                    activeThread.id\n                ]\n            });\n        }).subscribe((status)=>{\n            console.log(\"\\uD83D\\uDCE1 Thread subscription status: \".concat(status));\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    threads: status === \"SUBSCRIBED\"\n                }));\n        });\n        return ()=>{\n            console.log(\"\\uD83D\\uDD0C Cleaning up thread subscription\");\n            setSubscriptionStatus((prev)=>({\n                    ...prev,\n                    threads: false\n                }));\n            supabase.removeChannel(channel);\n        };\n    }, [\n        activeThread === null || activeThread === void 0 ? void 0 : activeThread.id\n    ]); // Only when active thread changes\n    // Optional: Add a subscription status indicator\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Subscription Status:\", subscriptionStatus);\n    }, [\n        subscriptionStatus\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleFocus = ()=>{\n            if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id) {\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        \"messages\",\n                        currentChannel.id\n                    ]\n                });\n            }\n        };\n        window.addEventListener(\"focus\", handleFocus);\n        return ()=>window.removeEventListener(\"focus\", handleFocus);\n    }, [\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id,\n        queryClient\n    ]);\n    const handleChannelCreated = (channel)=>{\n        console.log(\"Channel created:\", channel);\n        setShowCreateChannel(false);\n        setCurrentChannel(channel);\n        queryClient.invalidateQueries({\n            queryKey: [\n                \"channels\"\n            ]\n        });\n    };\n    const handleSendMessage = async (content)=>{\n        if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id)) return;\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n        const { error } = await supabase.from(\"messages\").insert([\n            {\n                content,\n                channel_id: currentChannel.id,\n                user_id: user.id,\n                created_at: new Date().toISOString()\n            }\n        ]);\n        if (error) {\n            console.error(\"Error sending message:\", error);\n        }\n    };\n    const handleSendReply = async (content)=>{\n        if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id) || !(activeThread === null || activeThread === void 0 ? void 0 : activeThread.id)) return;\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n        const { error } = await supabase.from(\"messages\").insert([\n            {\n                content,\n                channel_id: currentChannel.id,\n                user_id: user.id,\n                thread_id: activeThread.id,\n                created_at: new Date().toISOString()\n            }\n        ]);\n        if (error) {\n            console.error(\"Error sending reply:\", error);\n        }\n    };\n    const handleContextMenu = (e, message)=>{\n        e.preventDefault();\n        setContextMenu({\n            message,\n            position: {\n                x: e.pageX,\n                y: e.pageY\n            }\n        });\n    };\n    const handleReply = (message)=>{\n        setActiveThread(message);\n    };\n    const handleCreateDM = async (userId)=>{\n        try {\n            const { data: { user } } = await supabase.auth.getUser();\n            if (!user) return;\n            // Check if DM already exists using junction table\n            const { data: existingDM } = await supabase.from(\"channels\").select(\"\\n          *,\\n          channel_members!inner (\\n            user_id,\\n            profiles (\\n              id,\\n              username\\n            )\\n          )\\n        \").eq(\"type\", \"dm\").returns();\n            if (existingDM && existingDM.length > 0) {\n                setCurrentChannel(existingDM[0]);\n                return;\n            }\n            // Create new DM channel\n            const { data: otherUser } = await supabase.from(\"profiles\").select(\"username\").eq(\"id\", userId).single();\n            const { data: newChannel, error: channelError } = await supabase.from(\"channels\").insert([\n                {\n                    type: \"dm\",\n                    created_by: user.id,\n                    name: (otherUser === null || otherUser === void 0 ? void 0 : otherUser.username) || \"unknown\" // Just use their username\n                }\n            ]).select().single();\n            if (channelError) throw channelError;\n            // Add both users to channel_members\n            const { error: participantsError } = await supabase.from(\"channel_members\").insert([\n                {\n                    channel_id: newChannel.id,\n                    user_id: user.id,\n                    joined_at: new Date().toISOString(),\n                    last_read_at: new Date().toISOString()\n                },\n                {\n                    channel_id: newChannel.id,\n                    user_id: userId,\n                    joined_at: new Date().toISOString(),\n                    last_read_at: new Date().toISOString()\n                }\n            ]);\n            if (participantsError) throw participantsError;\n            // Fetch the complete DM with participants\n            const { data: completeDM, error: fetchError } = await supabase.from(\"channels\").select(\"\\n          *,\\n          channel_members (\\n            user_id,\\n            profiles (\\n              id,\\n              username\\n            )\\n          )\\n        \").eq(\"id\", newChannel.id).single();\n            if (fetchError) throw fetchError;\n            // Cast completeDM to Channel type since we know the shape matches\n            const channelData = completeDM;\n            setCurrentChannel(channelData);\n            queryClient.invalidateQueries({\n                queryKey: [\n                    \"dms\"\n                ]\n            });\n        } catch (error) {\n            console.error(\"Detailed error creating DM:\", error);\n            throw error;\n        }\n    };\n    const handleDeleteMessage = async (message)=>{\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user || message.user_id !== user.id) return;\n        const { error } = await supabase.from(\"messages\").delete().eq(\"id\", message.id).returns();\n        if (error) {\n            console.error(\"Error deleting message:\", error);\n            return;\n        }\n        // If this was a thread parent, close the thread panel\n        if ((activeThread === null || activeThread === void 0 ? void 0 : activeThread.id) === message.id) {\n            setActiveThread(null);\n        }\n        // Refresh messages\n        queryClient.invalidateQueries({\n            queryKey: [\n                \"messages\",\n                currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.id\n            ]\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen bg-gray-900 text-gray-100\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-64 bg-gray-800 flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-4 border-b border-gray-700\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-xl font-bold text-green-500\",\n                            children: \"ChatGenius\"\n                        }, void 0, false, {\n                            fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                            lineNumber: 425,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                        lineNumber: 424,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ChannelList__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                        channels: channels,\n                        setCurrentChannel: setCurrentChannel,\n                        setShowCreateChannel: setShowCreateChannel\n                    }, void 0, false, {\n                        fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                        lineNumber: 427,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                lineNumber: 423,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col\",\n                children: currentChannel ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"p-4 border-b border-gray-700\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-lg font-semibold\",\n                                children: [\n                                    \"#\",\n                                    currentChannel.name\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                lineNumber: 439,\n                                columnNumber: 15\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                            lineNumber: 438,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex-1 flex\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-1 flex flex-col\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex-1 overflow-y-auto\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageList__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                messages: messages,\n                                                setContextMenu: setContextMenu,\n                                                setActiveThread: setActiveThread\n                                            }, void 0, false, {\n                                                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                                lineNumber: 444,\n                                                columnNumber: 19\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                            lineNumber: 443,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageInput__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                            onSendMessage: handleSendMessage,\n                                            currentChannel: currentChannel\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                            lineNumber: 450,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                    lineNumber: 442,\n                                    columnNumber: 15\n                                }, undefined),\n                                activeThread && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ThreadPanel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    thread: activeThread,\n                                    onClose: ()=>setActiveThread(null)\n                                }, void 0, false, {\n                                    fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                                    lineNumber: 456,\n                                    columnNumber: 17\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                            lineNumber: 441,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex-1 flex items-center justify-center text-gray-500\",\n                    children: \"Select a channel to start chatting\"\n                }, void 0, false, {\n                    fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                    lineNumber: 464,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                lineNumber: 435,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-64 bg-gray-800 border-l border-gray-700\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_UserList__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                    lineNumber: 472,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                lineNumber: 471,\n                columnNumber: 7\n            }, undefined),\n            showCreateChannel && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_CreateChannelModal__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                onClose: ()=>setShowCreateChannel(false),\n                onChannelCreated: handleChannelCreated\n            }, void 0, false, {\n                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                lineNumber: 477,\n                columnNumber: 9\n            }, undefined),\n            contextMenu && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageContextMenu__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                message: contextMenu.message,\n                position: contextMenu.position,\n                onClose: ()=>setContextMenu(null),\n                onThreadClick: setActiveThread,\n                onDelete: handleDeleteMessage\n            }, void 0, false, {\n                fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n                lineNumber: 484,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/jarrett/Documents/GauntletAI/ChatGenius/chatgenius/chat-app/app/components/ChatInterface.tsx\",\n        lineNumber: 421,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ChatInterface, \"fOTGu5qGgsfPuHr3C56+bwY/4k0=\", false, function() {\n    return [\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useQueryClient,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQuery,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQuery\n    ];\n});\n_c = ChatInterface;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChatInterface);\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/ChatInterface.tsx\n"));

/***/ })

});